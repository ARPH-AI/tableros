/* tslint:disable */
/* eslint-disable */
/**
 * Nominatim
 * Interface for the search engine used on the OpenStreetMap website
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { City } from '../models';
/**
 * OsmApi - axios parameter creator
 * @export
 */
export const OsmApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} city Ciudad a buscar
         * @param {'argentina'} country Pais a buscar
         * @param {'jsonv2'} format Formato de respuesta
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findGeoByCity: async (city: string, country: 'argentina', format: 'jsonv2', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'city' is not null or undefined
            assertParamExists('findGeoByCity', 'city', city)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('findGeoByCity', 'country', country)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('findGeoByCity', 'format', format)
            const localVarPath = `/search.php`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OsmApi - functional programming interface
 * @export
 */
export const OsmApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OsmApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} city Ciudad a buscar
         * @param {'argentina'} country Pais a buscar
         * @param {'jsonv2'} format Formato de respuesta
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findGeoByCity(city: string, country: 'argentina', format: 'jsonv2', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<City>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findGeoByCity(city, country, format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OsmApi - factory interface
 * @export
 */
export const OsmApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OsmApiFp(configuration)
    return {
        /**
         * 
         * @param {string} city Ciudad a buscar
         * @param {'argentina'} country Pais a buscar
         * @param {'jsonv2'} format Formato de respuesta
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findGeoByCity(city: string, country: 'argentina', format: 'jsonv2', options?: any): AxiosPromise<Array<City>> {
            return localVarFp.findGeoByCity(city, country, format, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for findGeoByCity operation in OsmApi.
 * @export
 * @interface OsmApiFindGeoByCityRequest
 */
export interface OsmApiFindGeoByCityRequest {
    /**
     * Ciudad a buscar
     * @type {string}
     * @memberof OsmApiFindGeoByCity
     */
    readonly city: string

    /**
     * Pais a buscar
     * @type {'argentina'}
     * @memberof OsmApiFindGeoByCity
     */
    readonly country: 'argentina'

    /**
     * Formato de respuesta
     * @type {'jsonv2'}
     * @memberof OsmApiFindGeoByCity
     */
    readonly format: 'jsonv2'
}

/**
 * OsmApi - object-oriented interface
 * @export
 * @class OsmApi
 * @extends {BaseAPI}
 */
export class OsmApi extends BaseAPI {
    /**
     * 
     * @param {OsmApiFindGeoByCityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OsmApi
     */
    public findGeoByCity(requestParameters: OsmApiFindGeoByCityRequest, options?: AxiosRequestConfig) {
        return OsmApiFp(this.configuration).findGeoByCity(requestParameters.city, requestParameters.country, requestParameters.format, options).then((request) => request(this.axios, this.basePath));
    }
}
